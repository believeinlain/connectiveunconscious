#!/usr/bin/env node

const fs = require('fs');
const app = require('../app');
// var debug = require('debug')('connectiveunconscious:server');
const http = require('http');
const { argv } = require('process');

// Are we using https?
const use_https = argv.includes('s');

// optional https support
if (use_https)
{
  const https = require('https');
  const express = require('express');

  // Certificate
  var credentials = {
    key: fs.readFileSync('/etc/letsencrypt/live/connectiveunconscious.com/privkey.pem', 'utf8'),
    cert: fs.readFileSync('/etc/letsencrypt/live/connectiveunconscious.com/cert.pem', 'utf8'),
    ca: fs.readFileSync('/etc/letsencrypt/live/connectiveunconscious.com/chain.pem', 'utf8')
  };
  // Feed our app into an https server
  https.createServer(credentials, app).listen(443, () => {
    console.log('HTTPS Server running on port 443');
  });
  // run a minimal http server to redirect
  const httpApp = express();
  httpApp.all('*', (req, res) => {
    res.redirect(302, 'https://' + req.headers.host + req.url);
  });
  http.createServer(httpApp).listen(8080, () => {
    console.log('HTTP redirect server running on port 8080');
  });
}
else
{
  http.createServer(app).listen(8080, () => {
    console.log('HTTP Server running on port 8080');
  });
}

/**
 * Get port from environment and store in Express.
 */
// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

// var server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port, () => {
//   console.log(`HTTP Server running on port ${port}`);
// });
// server.on('error', onError);
// server.on('listening', onListening);

// var httpsServer = https.createServer();
// httpsServer.on('error', onError);
// httpsServer.listen(443, () => {
//   console.log('HTTPS Server running on port 443');
// });
// https.get('https://*', function(req, res) {  
//   res.redirect('http://' + req.headers.host + req.url);
// });

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
